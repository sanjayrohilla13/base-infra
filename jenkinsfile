def STAGE_TO_RUN =params.STAGE
pipeline {
    agent any
    environment {
        AWS_DEFAULT_REGION = 'ap-southeast-2'
        //TEMP_VAR = credentials('srv-ecr-usr')
        def DOCKER_SOURCE = " "
    }

    parameters{
        choice(name: 'ENVIRONMENT', choices: ['dev','prod'], description: 'Select the Environment Name')
        string(name: 'BRANCH', defaultValue: 'life-cycle-policy', description: 'Enter the branch to build')
        choice(name: 'STAGE', choices: ['plan','deploy','destroy'], description: 'Terraform Stage to Apply')
    }
    stages {
        stage('Download GIT Hub Repo') {
            steps {
                echo 'Downloading..'
                script {
                    git branch: params.BRANCH, poll: false, url: 'https://github.com/sanjayrohilla13/base-infra.git'
                }
            }
        }
// plan stage
        stage('Plan-Base-Infra') {
            when{expression{STAGE_TO_RUN.contains('plan')}}
            steps {
                withCredentials([aws(accessKeyVariable:'AWS_ACCESS_KEY_ID',credentialsId:'srv-ecr-usr',secretKeyVariable:'AWS_SECRET_ACCESS_KEY')]) {
                    sh (script: """
                        set -x   
                        cd terraform/domain/${ENVIRONMENT}
                        pwd
                        echo "Sanjay"
                        terraform init
                        terraform get -update
                        TF_LOG=DEBUG terraform plan
                        """, returnStdout: true)
                }  
            }  
        }
        // Apply stage
        stage('Apply-Base-Infra') {
            when{expression{STAGE_TO_RUN.contains('deploy')}}
            steps {
                withCredentials([aws(accessKeyVariable:'AWS_ACCESS_KEY_ID',credentialsId:'srv-ecr-usr',secretKeyVariable:'AWS_SECRET_ACCESS_KEY')]) {
                    sh (script: """
                        set -x   
                        cd terraform/domain/${ENVIRONMENT}
                        pwd
                        echo "Sanjay"
                        terraform init
                        terraform get -update
                        TF_LOG=DEBUG terraform apply -auto-approve
                        """, returnStdout: true)
                }  
            }  
        }
        // destroy stage
        stage('Destroy-Base-Infra') {
            when{expression{STAGE_TO_RUN.contains('destroy')}}
            steps {
                withCredentials([aws(accessKeyVariable:'AWS_ACCESS_KEY_ID',credentialsId:'srv-ecr-usr',secretKeyVariable:'AWS_SECRET_ACCESS_KEY')]) {
                    sh (script: """
                        set -x   
                        cd terraform/domain/${ENVIRONMENT}
                        pwd
                        echo "Sanjay"
                        terraform init
                        terraform get -update
                        TF_LOG=DEBUG terraform destroy -auto-approve
                        """, returnStdout: true)
                }  
            }  
        }
    }
}

